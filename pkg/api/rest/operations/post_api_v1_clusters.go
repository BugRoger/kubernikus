package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostAPIV1ClustersHandlerFunc turns a function with the right signature into a post API v1 clusters handler
type PostAPIV1ClustersHandlerFunc func(PostAPIV1ClustersParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAPIV1ClustersHandlerFunc) Handle(params PostAPIV1ClustersParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostAPIV1ClustersHandler interface for that can handle valid post API v1 clusters params
type PostAPIV1ClustersHandler interface {
	Handle(PostAPIV1ClustersParams, interface{}) middleware.Responder
}

// NewPostAPIV1Clusters creates a new http.Handler for the post API v1 clusters operation
func NewPostAPIV1Clusters(ctx *middleware.Context, handler PostAPIV1ClustersHandler) *PostAPIV1Clusters {
	return &PostAPIV1Clusters{Context: ctx, Handler: handler}
}

/*PostAPIV1Clusters swagger:route POST /api/v1/clusters/ postApiV1Clusters

Create a cluster

*/
type PostAPIV1Clusters struct {
	Context *middleware.Context
	Handler PostAPIV1ClustersHandler
}

func (o *PostAPIV1Clusters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostAPIV1ClustersParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
