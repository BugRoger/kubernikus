package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAPIV1ClustersNameHandlerFunc turns a function with the right signature into a get API v1 clusters name handler
type GetAPIV1ClustersNameHandlerFunc func(GetAPIV1ClustersNameParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIV1ClustersNameHandlerFunc) Handle(params GetAPIV1ClustersNameParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAPIV1ClustersNameHandler interface for that can handle valid get API v1 clusters name params
type GetAPIV1ClustersNameHandler interface {
	Handle(GetAPIV1ClustersNameParams, interface{}) middleware.Responder
}

// NewGetAPIV1ClustersName creates a new http.Handler for the get API v1 clusters name operation
func NewGetAPIV1ClustersName(ctx *middleware.Context, handler GetAPIV1ClustersNameHandler) *GetAPIV1ClustersName {
	return &GetAPIV1ClustersName{Context: ctx, Handler: handler}
}

/*GetAPIV1ClustersName swagger:route GET /api/v1/clusters/{name} getApiV1ClustersName

Show the specified cluser

*/
type GetAPIV1ClustersName struct {
	Context *middleware.Context
	Handler GetAPIV1ClustersNameHandler
}

func (o *GetAPIV1ClustersName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAPIV1ClustersNameParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
